<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:res="clr-namespace:PasswordManager.Properties"
                    >
    
    <SolidColorBrush x:Key="SearchTextBoxStyle.Static.Border.Background" Color="{DynamicResource SearchTextBox.Static.Border.Background}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.Static.Border.BorderBrush" Color="{DynamicResource SearchTextBox.Static.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.IsMouseOver.Border.BorderBrush" Color="{DynamicResource SearchTextBox.IsMouseOver.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.IsFocused.Border.BorderBrush" Color="{DynamicResource SearchTextBox.IsFocused.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.Static.BorderBrush" Color="{DynamicResource SearchTextBox.Static.BorderBrush}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.IsEnabledFalse.BorderBrush" Color="{DynamicResource SearchTextBox.IsEnabledFalse.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.IsEnabledFalse.Background" Color="{DynamicResource SearchTextBox.IsEnabledFalse.Background}"/>


    <SolidColorBrush x:Key="AddButtonStyle.Static.Background" Color="{DynamicResource AddButton.Static.Background}"/>
    <SolidColorBrush x:Key="AddButtonStyle.IsPressed.Background" Color="{DynamicResource AddButton.IsPressed.Background}"/>
    <SolidColorBrush x:Key="AddButtonStyle.IsMouseOver.Background" Color="{DynamicResource AddButton.IsMouseOver.Background}"/>
    <SolidColorBrush x:Key="AddButtonStyle.IsEnabledFalse.Background" Color="{DynamicResource AddButton.IsEnabledFalse.Background}"/>
    <SolidColorBrush x:Key="AddButtonStyle.Text.Foreground" Color="{DynamicResource AddButton.Text.Foreground}"/>
    
    <Style x:Key="SearchTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="CaretBrush" Value="{DynamicResource TextColor}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderThickness="2" 
                                CornerRadius="5" Background="{DynamicResource SearchTextBoxStyle.Static.Border.Background}" 
                                BorderBrush="{DynamicResource SearchTextBoxStyle.Static.Border.BorderBrush}">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock x:Name="Loop" RenderTransformOrigin="0.5,0.6"  Text="&#xE721;" FontFamily="Segoe MDL2 Assets" HorizontalAlignment="Left" VerticalAlignment="Center" Padding="10,0,5,0">
                                <TextBlock.RenderTransform>
                                    <RotateTransform x:Name="RotateLoop" Angle="-90"/>
                                </TextBlock.RenderTransform>
                            </TextBlock>
                            <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource SearchTextBoxStyle.IsMouseOver.Border.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetName="RotateLoop" Storyboard.TargetProperty="Angle"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" To="-90" Storyboard.TargetName="RotateLoop" Storyboard.TargetProperty="Angle"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Foreground" TargetName="Loop" Value="{DynamicResource SearchTextBoxStyle.IsFocused.Border.BorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SearchTextBoxStyle.IsFocused.Border.BorderBrush}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource SearchTextBoxStyle.IsEnabledFalse.BorderBrush}"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource SearchTextBoxStyle.IsEnabledFalse.Background}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontFamily" Value="Global Sans Serif"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SearchTextBoxStyle.Static.BorderBrush}"/>
    </Style>

    <Style x:Key="AddButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            CornerRadius="5"
                            BorderThickness="0">
                        <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontFamily="Segoe MDL2 Assets"
                                       Foreground="{DynamicResource AddButtonStyle.Text.Foreground}"
                                       FontSize="18"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="Background" Value="{DynamicResource AddButtonStyle.Static.Background}"/>


        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">

                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="{DynamicResource AddButtonStyle.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource AddButtonStyle.IsPressed.Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource AddButtonStyle.IsEnabledFalse.Background}"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <SolidColorBrush x:Key="DataGridStyle.Static.Background" Color="{DynamicResource DataGrid.Static.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.ColumnHeader.Foreground" Color="{DynamicResource DataGrid.ColumnHeader.Foreground}"/>
    <SolidColorBrush x:Key="DataGridStyle.Row.Foreground" Color="{DynamicResource DataGrid.Row.Foreground}"/>
    <SolidColorBrush x:Key="DataGridStyle.ScrollBar.Background" Color="{DynamicResource DataGrid.ScrollBar.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.ScrollBar.Foreground" Color="{DynamicResource DataGrid.ScrollBar.Foreground}"/>
    <SolidColorBrush x:Key="DataGridStyle.Cell.IsMouseOver.Background" Color="{DynamicResource DataGrid.Cell.IsMouseOver.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.Cell.IsSelected.Background" Color="{DynamicResource DataGrid.Cell.IsSelected.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.ToolTip.Background" Color="{DynamicResource DataGrid.ToolTip.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.ToolTip.Foreground" Color="{DynamicResource DataGrid.ToolTip.Foreground}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenu.Background" Color="{DynamicResource DataGrid.PopupMenu.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenu.Foreground" Color="{DynamicResource DataGrid.PopupMenu.Foreground}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenuButton.IsMouseOver.Background" Color="{DynamicResource DataGrid.PopUpMenuButton.IsMouseOver.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenuButton.IsPressed.Background" Color="{DynamicResource DataGrid.PopUpMenuButton.IsPressed.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenuItem.IsMouseOver.Background" Color="{DynamicResource DataGrid.PopUpMenuItem.IsMouseOver.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenuItem.IsPressed.Background" Color="{DynamicResource DataGrid.PopUpMenuItem.IsPressed.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.DropDownBorder.BorderBrush" Color="{DynamicResource DataGrid.DropDownBorder.BorderBrush}"/>
    

    <Style x:Key="DataGridStyle" TargetType="{x:Type DataGrid}">
        <Style.Resources>
            <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Grid x:Name="Grid">
                                <Border x:Name="Rectangle1" CornerRadius="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="10" Height="Auto"  Background="{TemplateBinding Background}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--ScrollBars-->
            <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">

                <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
                <Setter Property="Foreground" Value="{DynamicResource DataGridStyle.ScrollBar.Foreground}"/>
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.ScrollBar.Background}" />
                <Setter Property="Width" Value="10" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Border CornerRadius="5" Width="10" Background="{TemplateBinding Background}">
                                <Grid x:Name="GridRoot">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="0.00001*" />
                                    </Grid.RowDefinitions>
                                    <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                                        <Track.Thumb>
                                            <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                                        </Track.Thumb>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                                        </Track.IncreaseRepeatButton>
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                                        </Track.DecreaseRepeatButton>
                                    </Track>

                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.Static.Background}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="CanUserResizeColumns" Value="False"/>
        <Setter Property="SelectionUnit" Value="Cell"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
    </Style>
    <Style x:Key="DataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.Static.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource DataGridStyle.ColumnHeader.Foreground}"/>
        <Setter Property="FontFamily"  Value="Global Sans Serif"/>
        <Setter Property="FontSize" Value="16"/>
    </Style>
    <Style x:Key="DataGridRowStyle" TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.Static.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource DataGridStyle.Row.Foreground}"/>
        <Setter Property="FontFamily"  Value="Global Sans Serif"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type DataGridCell}" x:Key="DataGridCellStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center">
                            <ContentPresenter.ToolTip>
                                <ToolTip ToolTipService.InitialShowDelay="10000"  Background="Transparent" Padding="0,0,0,0" BorderBrush="Transparent">
                                    <Border Background="{DynamicResource DataGridStyle.ToolTip.Background}"  CornerRadius="5" MinHeight="20" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" MaxWidth="100" Padding="5">
                                        <TextBlock Text="{x:Static res:Resources.TapToCopyToolTip}" 
                                                   FontFamily="Global Sans Serif" 
                                                   FontSize="12" 
                                                   HorizontalAlignment="Center" 
                                                   VerticalAlignment="Center" 
                                                   TextAlignment="Center" 
                                                   Foreground="{DynamicResource DataGridStyle.ToolTip.Foreground}" 
                                                   TextWrapping="WrapWithOverflow"/>

                                    </Border>
                                </ToolTip>
                            </ContentPresenter.ToolTip>
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>

            </Setter.Value>

        </Setter>
        <Setter Property="Padding" Value="5,0,5,0"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value = "{DynamicResource DataGridStyle.Cell.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value = "{DynamicResource DataGridStyle.Static.Background}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsSelected" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value = "{DynamicResource DataGridStyle.Cell.IsMouseOver.Background}"/>
            </MultiTrigger>

        </Style.Triggers>
    </Style>
    <Style x:Key="NonSelectableCellStyle" TargetType="{x:Type DataGridCell}">
        <Setter Value="False" Property="Focusable"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.Static.Background}"/>
                <Setter Property="BorderBrush" Value="Transparent"/>

            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="PopupMenuButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            CornerRadius="10"
                            BorderThickness="0">
                        <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontFamily="Segoe MDL2 Assets"
                                       Foreground="{DynamicResource DataGridStyle.PopupMenu.Foreground}"
                                       FontSize="16" RenderTransformOrigin="0.5,0.5">
                            <TextBlock.RenderTransform>
                                <RotateTransform Angle="90"/>
                            </TextBlock.RenderTransform>
                        </TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenu.Background}"/>


        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenuButton.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenuButton.IsPressed.Background}"/>
            </Trigger>

        </Style.Triggers>

    </Style>
    <Style x:Key="PopupMenuStyle" TargetType="{x:Type Popup}">
        <Setter Property="StaysOpen" Value="False"/>
        <Setter Property="IsOpen" Value="False"/>
        <Setter Property="Placement" Value="Center"/>
        <Setter Property="PopupAnimation" Value="Fade"/>
    </Style>
    <Style x:Key="PopupMenuItemStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                        CornerRadius="0"
                            BorderThickness="0">
                        <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontFamily="Global Sans Serif"
                                       Foreground="{DynamicResource DataGridStyle.PopupMenu.Foreground}"
                                       FontSize="16" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenu.Background}"/>


        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenuItem.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenuItem.IsPressed.Background}"/>
            </Trigger>

        </Style.Triggers>

    </Style>
    <Style x:Key="PopupMenuDropDownBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="CornerRadius" Value="3"/>
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenu.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource DataGridStyle.DropDownBorder.BorderBrush}"/>
    </Style>

    <Style x:Key="RevealPasswordToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Image x:Name="img" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill">
                        <Image.Style>
                            <Style TargetType="{x:Type Image}">
                                <Setter Property="Source" Value="{DynamicResource ResourceKey=OpenEye}"/>
                            </Style>
                        </Image.Style>
                    </Image>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="img" Property="Source" Value="{DynamicResource ResourceKey=ClosedEye}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
    </Style>

</ResourceDictionary>