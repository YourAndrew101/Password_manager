<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:res="clr-namespace:PasswordManager.Properties"
                    >

    <SolidColorBrush x:Key="WindowButtonStyle.Static.Background" Color="{DynamicResource WindowButton.Static.Background}"/>
    <SolidColorBrush x:Key="WindowButtonStyle.IsMouseOver.Background" Color="{DynamicResource WindowButton.IsMouseOver.Background}"/>
    <SolidColorBrush x:Key="WindowButtonStyle.IsPressed.Background" Color="{DynamicResource WindowButton.IsPressed.Background}"/>

    <LinearGradientBrush x:Key="GradientRectangleStyle.Static.Fill" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Color="{DynamicResource GradientStop1}" Offset="0"/>
        <GradientStop Color="{DynamicResource GradientStop2}" Offset="0.5"/>
        <GradientStop Color="{DynamicResource GradientStop3}" Offset="1"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="NavmenuItemStyle.Active.Foreground" Color="{DynamicResource NavmenuItem.Active.Foreground}"/>
    <SolidColorBrush x:Key="NavmenuItemStyle.InActive.Foreground" Color="{DynamicResource NavmenuItem.InActive.Foreground}"/>
    <SolidColorBrush x:Key="NavmenuItemStyle.Pressed.Background" Color="{DynamicResource NavmenuItem.Pressed.Background}"/>
    <SolidColorBrush x:Key="NavmenuItemStyle.IsMouseOver.Foreground" Color="{DynamicResource NavmenuItem.IsMouseOver.Foreground}"/>

    <SolidColorBrush x:Key="SearchTextBoxStyle.Static.Border.Background" Color="{DynamicResource SearchTextBox.Static.Border.Background}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.Static.Border.BorderBrush" Color="{DynamicResource SearchTextBox.Static.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.IsMouseOver.Border.BorderBrush" Color="{DynamicResource SearchTextBox.IsMouseOver.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.IsFocused.Border.BorderBrush" Color="{DynamicResource SearchTextBox.IsFocused.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.Static.BorderBrush" Color="{DynamicResource SearchTextBox.Static.BorderBrush}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.IsEnabledFalse.BorderBrush" Color="{DynamicResource SearchTextBox.IsEnabledFalse.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="SearchTextBoxStyle.IsEnabledFalse.Background" Color="{DynamicResource SearchTextBox.IsEnabledFalse.Background}"/>


    <SolidColorBrush x:Key="AddButtonStyle.Static.Background" Color="{DynamicResource AddButton.Static.Background}"/>
    <SolidColorBrush x:Key="AddButtonStyle.IsPressed.Background" Color="{DynamicResource AddButton.IsPressed.Background}"/>
    <SolidColorBrush x:Key="AddButtonStyle.IsMouseOver.Background" Color="{DynamicResource AddButton.IsMouseOver.Background}"/>
    <SolidColorBrush x:Key="AddButtonStyle.IsEnabledFalse.Background" Color="{DynamicResource AddButton.IsEnabledFalse.Background}"/>
    <SolidColorBrush x:Key="AddButtonStyle.Text.Foreground" Color="{DynamicResource AddButton.Text.Foreground}"/>

    <SolidColorBrush x:Key="TextBoxStyle.Static.Border.Background" Color="{DynamicResource TextBox.Static.Border.Background}"/>
    <SolidColorBrush x:Key="TextBoxStyle.Static.Border.BorderBrush" Color="{DynamicResource TextBox.Static.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="TextBoxStyle.IsMouseOver.Border.BorderBrush" Color="{DynamicResource TextBox.IsMouseOver.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="TextBoxStyle.IsFocused.Border.BorderBrush" Color="{DynamicResource TextBox.IsFocused.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="TextBoxStyle.Static.BorderBrush" Color="{DynamicResource TextBox.Static.BorderBrush}"/>
    <SolidColorBrush x:Key="TextBoxStyle.IsEnabledFalse.BorderBrush" Color="{DynamicResource TextBox.IsEnabledFalse.Border.BorderBrush}"/>
    <SolidColorBrush x:Key="TextBoxStyle.IsEnabledFalse.Background" Color="{DynamicResource TextBox.IsEnabledFalse.Background}"/>

    <SolidColorBrush x:Key="SubmitButtonStyle.Static.Background" Color="{DynamicResource SubmitButton.Static.Background}"/>
    <SolidColorBrush x:Key="SubmitButtonStyle.IsPressed.Background" Color="{DynamicResource SubmitButton.IsPressed.Background}"/>
    <SolidColorBrush x:Key="SubmitButtonStyle.IsMouseOver.Background" Color="{DynamicResource SubmitButton.IsMouseOver.Background}"/>
    <SolidColorBrush x:Key="SubmitButtonStyle.IsEnabledFalse.Background" Color="{DynamicResource SubmitButton.IsEnabledFalse.Background}"/>
    <SolidColorBrush x:Key="SubmitButtonStyle.Text.Foreground" Color="{DynamicResource SubmitButton.Text.Foreground}"/>

    <SolidColorBrush x:Key="NotificationBorderStyle.Static.Background" Color="{DynamicResource NotificationBorder.Static.Background}"/>
    <SolidColorBrush x:Key="NotificationTextBlockStyle.Static.Foreground" Color="{DynamicResource NotificationTextBlock.Text.Foreground}"/>

    <SolidColorBrush x:Key="DataGridStyle.Static.Background" Color="{DynamicResource DataGrid.Static.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.ColumnHeader.Foreground" Color="{DynamicResource DataGrid.ColumnHeader.Foreground}"/>
    <SolidColorBrush x:Key="DataGridStyle.Row.Foreground" Color="{DynamicResource DataGrid.Row.Foreground}"/>
    <SolidColorBrush x:Key="DataGridStyle.ScrollBar.Background" Color="{DynamicResource DataGrid.ScrollBar.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.ScrollBar.Foreground" Color="{DynamicResource DataGrid.ScrollBar.Foreground}"/>
    <SolidColorBrush x:Key="DataGridStyle.Cell.IsMouseOver.Background" Color="{DynamicResource DataGrid.Cell.IsMouseOver.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.Cell.IsSelected.Background" Color="{DynamicResource DataGrid.Cell.IsSelected.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.ToolTip.Background" Color="{DynamicResource DataGrid.ToolTip.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.ToolTip.Foreground" Color="{DynamicResource DataGrid.ToolTip.Foreground}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenu.Background" Color="{DynamicResource DataGrid.PopupMenu.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenu.Foreground" Color="{DynamicResource DataGrid.PopupMenu.Foreground}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenuButton.IsMouseOver.Background" Color="{DynamicResource DataGrid.PopUpMenuButton.IsMouseOver.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenuButton.IsPressed.Background" Color="{DynamicResource DataGrid.PopUpMenuButton.IsPressed.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenuItem.IsMouseOver.Background" Color="{DynamicResource DataGrid.PopUpMenuItem.IsMouseOver.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.PopupMenuItem.IsPressed.Background" Color="{DynamicResource DataGrid.PopUpMenuItem.IsPressed.Background}"/>
    <SolidColorBrush x:Key="DataGridStyle.DropDownBorder.BorderBrush" Color="{DynamicResource DataGrid.DropDownBorder.BorderBrush}"/>

    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}">

                        <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontFamily="Segoe MDL2 Assets"
                                       Foreground="{DynamicResource TextColor}"
                                       FontSize="10"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource WindowButtonStyle.Static.Background}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource WindowButtonStyle.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource WindowButtonStyle.IsPressed.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WindowToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}">

                        <TextBlock 
                                x:Name="text"
                                Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontFamily="Segoe MDL2 Assets"
                                       Foreground="{DynamicResource TextColor}"
                                       FontSize="10"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="text" Property="Text" Value="&#xE923;"/>
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="Background" Value="{DynamicResource WindowButtonStyle.Static.Background}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource WindowButtonStyle.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource WindowButtonStyle.IsPressed.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="NavmenuItem" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            
                            >

                        <TextBlock 
                                x:Name="text"
                                Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                
                                       FontFamily="Segoe MDL2 Assets"
                                       
                                       FontSize="20"
                                />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource NavmenuItemStyle.InActive.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource NavmenuItemStyle.Active.Foreground}"/>


                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource NavmenuItemStyle.IsMouseOver.Foreground}"/>

                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="Background" Value="{DynamicResource WindowButtonStyle.Static.Background}"/>
    </Style>
    <Style x:Key="PressedNavmenuItem" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{DynamicResource NavmenuItemStyle.Pressed.Background}"/>

    </Style>


    <Style x:Key="PageHeader" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Global Sans Serif"/>
        <Setter Property="FontSize" Value="36"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>


    <Style x:Key="SearchTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="CaretBrush" Value="{DynamicResource TextColor}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderThickness="2" 
                                CornerRadius="5" Background="{DynamicResource SearchTextBoxStyle.Static.Border.Background}" 
                                BorderBrush="{DynamicResource SearchTextBoxStyle.Static.Border.BorderBrush}">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock x:Name="Loop" RenderTransformOrigin="0.5,0.6"  Text="&#xE721;" FontFamily="Segoe MDL2 Assets" HorizontalAlignment="Left" VerticalAlignment="Center" Padding="10,0,5,0">
                                <TextBlock.RenderTransform>
                                    <RotateTransform x:Name="RotateLoop" Angle="-90"/>
                                </TextBlock.RenderTransform>
                            </TextBlock>
                            <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource SearchTextBoxStyle.IsMouseOver.Border.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetName="RotateLoop" Storyboard.TargetProperty="Angle"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" To="-90" Storyboard.TargetName="RotateLoop" Storyboard.TargetProperty="Angle"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Foreground" TargetName="Loop" Value="{DynamicResource SearchTextBoxStyle.IsFocused.Border.BorderBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SearchTextBoxStyle.IsFocused.Border.BorderBrush}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource SearchTextBoxStyle.IsEnabledFalse.BorderBrush}"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource SearchTextBoxStyle.IsEnabledFalse.Background}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontFamily" Value="Global Sans Serif"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SearchTextBoxStyle.Static.BorderBrush}"/>
    </Style>

    <Style x:Key="AddButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            CornerRadius="5"
                            BorderThickness="0">
                        <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontFamily="Segoe MDL2 Assets"
                                       Foreground="{DynamicResource AddButtonStyle.Text.Foreground}"
                                       FontSize="18"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="Background" Value="{DynamicResource AddButtonStyle.Static.Background}"/>


        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation To="{DynamicResource AddButton.IsPressed.Background}" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>-->
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="{DynamicResource AddButtonStyle.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource AddButtonStyle.IsPressed.Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource AddButtonStyle.IsEnabledFalse.Background}"/>
            </Trigger>
        </Style.Triggers>

    </Style>



    <Style x:Key="Shadow" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="Black"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <!--<Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.3" From="0" To="0.75" Storyboard.TargetProperty="Opacity"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.3" From="0.75" To="0" Storyboard.TargetProperty="Opacity"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>-->
    </Style>
    <!--Visibility="Collapsed" x:Name="FormBody" Background="Red" VerticalAlignment="Center" HorizontalAlignment="Center"-->
    <Style x:Key="AddEditForm" TargetType="{x:Type Grid}">

        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Background" Value="{DynamicResource MainColor}"/>

    </Style>

    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="CaretBrush" Value="{DynamicResource TextColor}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderThickness="2" 
                                CornerRadius="5" Background="{DynamicResource TextBoxStyle.Static.Border.Background}" 
                                BorderBrush="{DynamicResource TextBoxStyle.Static.Border.BorderBrush}">
                        <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxStyle.IsMouseOver.Border.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBoxStyle.IsFocused.Border.BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource TextBoxStyle.IsEnabledFalse.BorderBrush}"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource TextBoxStyle.IsEnabledFalse.Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontFamily" Value="Global Sans Serif"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxStyle.Static.BorderBrush}"/>
    </Style>

    <Style x:Key="PasswordCompexityRectangleStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="Fill" Value="{DynamicResource PasswordCompexityRectangleStyle.Static.Fill}"/>
        <Setter Property="Height" Value="14"/>
        <Setter Property="Width" Value="60"/>
        <Setter Property="Stroke" Value="{DynamicResource PasswordCompexityRectangleStyle.Static.Stroke}"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Visibility" Value="Visible"/>
    </Style>

    <Style x:Key="SubmitButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            CornerRadius="25"
                            BorderThickness="0">
                        <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontFamily="Global Sans Serif"
                                       Foreground="{DynamicResource SubmitButtonStyle.Text.Foreground}"
                                       FontSize="18"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SubmitButtonStyle.Static.Background}"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="{DynamicResource SubmitButtonStyle.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource SubmitButtonStyle.IsPressed.Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SubmitButtonStyle.IsEnabledFalse.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CancelButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <TextBlock
                            Text="{TemplateBinding Property=Content}"
                                      
                                       FontFamily="Global Sans Serif"
                                       Foreground="{DynamicResource TextColor}"
                                       FontSize="18"
                                    TextDecorations="None"
                            x:Name="textB"
                                    />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="TextDecorations" Value="Underline" TargetName="textB"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>

        </Setter>

    </Style>

    <Style x:Key="SuggestPassword" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            CornerRadius="5"
                            BorderThickness="0">
                        <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Left"
                                       Padding="5,0,0,0"
                                       FontFamily="Global Sans Serif"
                                       Foreground="{DynamicResource SubmitButtonStyle.Text.Foreground}"
                                       FontSize="14"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>


        <Setter Property="Background" Value="{DynamicResource SubmitButtonStyle.Static.Background}"/>
        <Setter Property="Visibility" Value="Collapsed"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="{DynamicResource SubmitButtonStyle.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource SubmitButtonStyle.IsPressed.Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SubmitButtonStyle.IsEnabledFalse.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="NotificationBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="Background" Value="{DynamicResource NotificationBorderStyle.Static.Background}"/>
        <!--<Setter Property="Margin" Value="0,0,0,20"/>-->
        <Setter Property="Padding" Value="15,0,15,0"/>
    </Style>
    <Style x:Key="NotificationTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource NotificationTextBlockStyle.Static.Foreground}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontFamily" Value="Global Sans Serif"/>
        <Setter Property="FontSize" Value="20"/>
    </Style>


    <Style x:Key="DataGridStyle" TargetType="{x:Type DataGrid}">
        <Style.Resources>


            <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Grid x:Name="Grid">
                                <Border x:Name="Rectangle1" CornerRadius="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="10" Height="Auto"  Background="{TemplateBinding Background}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--ScrollBars-->
            <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">

                <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
                <Setter Property="Foreground" Value="{DynamicResource DataGridStyle.ScrollBar.Foreground}"/>
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.ScrollBar.Background}" />
                <Setter Property="Width" Value="10" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Border CornerRadius="5" Width="10" Background="{TemplateBinding Background}">
                                <Grid x:Name="GridRoot">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="0.00001*" />
                                    </Grid.RowDefinitions>

                                    <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                                        <Track.Thumb>
                                            <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                                        </Track.Thumb>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                                        </Track.IncreaseRepeatButton>
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                                        </Track.DecreaseRepeatButton>
                                    </Track>

                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <!--<Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                                    <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                                </Trigger>
                                <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                                    <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                                </Trigger>-->
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.Static.Background}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="CanUserResizeColumns" Value="False"/>
        <Setter Property="SelectionUnit" Value="Cell"/>
        <Setter Property="CanUserSortColumns" Value="False"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="CanUserReorderColumns" Value="False"/>
        <Setter Property="GridLinesVisibility" Value="None"/>
    </Style>



    <Style x:Key="DataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.Static.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource DataGridStyle.ColumnHeader.Foreground}"/>
        <Setter Property="FontFamily"  Value="Global Sans Serif"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>
    <Style x:Key="DataGridRowStyle" TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.Static.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource DataGridStyle.Row.Foreground}"/>
        <Setter Property="FontFamily"  Value="Global Sans Serif"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        

    </Style>

    <Style TargetType="{x:Type DataGridCell}" x:Key="DataGridCellStyle">
        <Style.Setters>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center">
                            <ContentPresenter.ToolTip>
                                <ToolTip ToolTipService.InitialShowDelay="10000"  Background="Transparent" Padding="0,0,0,0" BorderBrush="Transparent">
                                    <Border Background="{DynamicResource DataGridStyle.ToolTip.Background}"  CornerRadius="5" MinHeight="20" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" MaxWidth="100" Padding="5">
                                        <TextBlock Text="{x:Static res:Resources.TapToCopyToolTip}" 
                                                   FontFamily="Global Sans Serif" 
                                                   FontSize="12" 
                                                   HorizontalAlignment="Center" 
                                                   VerticalAlignment="Center" 
                                                   TextAlignment="Center" 
                                                   Foreground="{DynamicResource DataGridStyle.ToolTip.Foreground}" 
                                                   TextWrapping="WrapWithOverflow"/>

                                    </Border>
                                </ToolTip>
                            </ContentPresenter.ToolTip>
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>

            </Setter.Value>

        </Setter>
            <Setter Property="Padding" Value="5,0,5,0"/>
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value = "{DynamicResource DataGridStyle.Cell.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value = "{DynamicResource DataGridStyle.Static.Background}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsSelected" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="Background" Value = "{DynamicResource DataGridStyle.Cell.IsMouseOver.Background}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>

        </Style.Triggers>
    </Style>
    <Style x:Key="NotSelectableColumnStyle" TargetType="{x:Type DataGridCell}">
        
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.Static.Background}"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
               
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="PopupMenuButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                            CornerRadius="10"
                            BorderThickness="0">
                        <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontFamily="Segoe MDL2 Assets"
                                       Foreground="{DynamicResource DataGridStyle.PopupMenu.Foreground}"
                                       FontSize="14" RenderTransformOrigin="0.5,0.5">
                            <TextBlock.RenderTransform>
                                <RotateTransform Angle="90"/>
                            </TextBlock.RenderTransform>
                        </TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenu.Background}"/>


        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenuButton.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenuButton.IsPressed.Background}"/>
            </Trigger>
            
        </Style.Triggers>

    </Style>
    <Style x:Key="PopupMenuStyle" TargetType="Popup">
        <Style.Setters>
            <Setter Property="StaysOpen" Value="False"/>
            <Setter Property="IsOpen" Value="False"/>
            <Setter Property="Placement" Value="Center"/>
            <Setter Property="PopupAnimation" Value="Fade"/>
        </Style.Setters>
    </Style>
    <Style x:Key="PopupMenuItemStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                            x:Name="border"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Background="{TemplateBinding Background}"
                            Height="{TemplateBinding Height}"
                            Width="{TemplateBinding Width}"
                        CornerRadius="0"
                            BorderThickness="0">
                        <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontFamily="Global Sans Serif"
                                       Foreground="{DynamicResource DataGridStyle.PopupMenu.Foreground}"
                                       FontSize="14" >
                            
                        </TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>

        </Setter>
        <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenu.Background}"/>


        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenuItem.IsMouseOver.Background}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenuItem.IsPressed.Background}"/>
            </Trigger>

        </Style.Triggers>

    </Style>
    <Style x:Key="PopupMenuDropDownBorderStyle" TargetType="Border">
        <Style.Setters>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="CornerRadius" Value="3"/>
            <Setter Property="Background" Value="{DynamicResource DataGridStyle.PopupMenu.Background}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource DataGridStyle.DropDownBorder.BorderBrush}"/>
        </Style.Setters>
    </Style>

    <Style x:Key="RevealPasswordToggleButtonStyle" TargetType="ToggleButton">
        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Image x:Name="img" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill">
                            <Image.Style>
                                <Style TargetType="Image">
                                    <Setter Property="Source" Value="{DynamicResource ResourceKey=OpenEye}"/>
                                </Style>
                            </Image.Style>
                        </Image>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="img" Property="Source" Value="{DynamicResource ResourceKey=ClosedEye}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="Margin" Value="5,0,0,0"/>
        </Style.Setters>
    </Style>


    <SolidColorBrush x:Key="SettingsListViewStyle.Background" Color="{DynamicResource SettingsListView.Background}"/>
    
    <Style TargetType="ListView" x:Key="SettingsListView">
        <Setter Property="Background" Value="{DynamicResource SettingsListViewStyle.Background}"/>
        <Setter Property= "ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="BorderThickness" Value="0"/>

    </Style>
</ResourceDictionary>